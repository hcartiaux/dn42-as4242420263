# This is AS4242420263 bird configuration file on the DN42 overlay network.
#
# Please refer to the BIRD User's Guide documentation, which is also available
# online at http://bird.network.cz/ in HTML format, for more information on
# configuring BIRD and adding routing protocols.

# Configure logging
# log syslog all;
# log stderr all;
# debug protocols all;

# local configuration
######################

# keeping router specific in a seperate file,
# so this configuration can be reused on multiple routers in your network
include "/etc/bird/variables.conf";

# Convenient functions
include "/etc/bird/utilities.conf";

# Router configuration
######################

router id OWNIP;

# Device status
protocol device {
    scan time 10;
}

# Kernel routing tables
########################

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD's
# routing tables with the OS kernel.
protocol kernel {
    scan time 20;

    ipv4 {
        import none;
        export filter {
            if source = RTS_STATIC then {
                print "Static route filtered: ", net;
                reject;
            }
            /*
                krt_prefsrc defines the source address for outgoing connections.
                On Linux, this causes the "src" attribute of a route to be set.

                Without this option outgoing connections would use the peering IP which
                would cause packet loss if some peering disconnects but the interface
                is still available. (The route would still exist and thus route through
                the TUN/TAP interface but the VPN daemon would simply drop the packet.)
            */
            krt_prefsrc = OWNIP;
            accept;
        };
    };
}

protocol kernel {
    scan time 20;

    ipv6 {
        import none;
        export filter {
            if source = RTS_STATIC then {
                print "Static route filtered: ", net;
                reject;
            }
            krt_prefsrc = OWNIPv6;
            accept;
        };
    };
};

# Static routes
###############

protocol static {
    route OWNNET reject;

    ipv4 {
        import all;
        export none;
    };
}

protocol static {
    route OWNNETv6 reject;

    ipv6 {
        import all;
        export none;
    };
}


# Include ROA tables definition
###############################

include "/etc/bird/roa.conf";


# BGP - DN42 peers
##################

# Community and import filters
include "/etc/bird/bgp_community_filters.conf";

template bgp dnpeers {
    local as OWNAS;
    # metric is the number of hops between us and the peer
    path metric 1;
    ipv4 {
        import limit 9000 action block;
        import table;
    };

    ipv6 {
        import limit 9000 action block;
        import table;
    };
}

template bgp dnpeers_ipv6_only {
    local as OWNAS;
    # metric is the number of hops between us and the peer
    path metric 1;

    ipv6 {
        import limit 9000 action block;
        import table;
    };
}


include "/etc/bird/bgp_peers/*";

# Babel - Internal network
##########################

# Include directly connected networks
protocol direct {
    ipv4;
    ipv6;
    interface "lo";
};

protocol babel int_babel {
    ipv4 {
        # Only route our internal network using Babel - ignore
        # everything sent from BGP.
        import where is_self_net() && source != RTS_BGP;
        export where is_self_net() && source != RTS_BGP;
    };
    ipv6 {
        import where is_self_net_v6() && source != RTS_BGP;
        export where is_self_net_v6() && source != RTS_BGP;
    };

    interface "wg-int-*" {
        # Note: Babel's cost metric is slightly different from BGP and OSPF.
        # rxcost specifies the cost for the neighbour to send traffic to us,
        # not the cost to send TO that neighbour. Of course, this won't have
        # any impact if you keep costs consistent on both ends.
        rxcost 123;
    };

};
